<?xml version="1.0" encoding="UTF-8" ?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at
  
      http://www.apache.org/licenses/LICENSE-2.0
    	  
  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
  
-->
<library>


<!-- ###################
    Class fileExplorer
 -->
<class name="fileExplorer" extends="view" >
	<switch>
		<when property="$as3">
			<passthrough>
				import flash.events.*;
				import flash.net.*;
			</passthrough>
		</when>
	</switch>
	<attribute name="parentFolderId" value="-2" type="number" />
	<attribute name="_selected" value="null" />
	<attribute name="rootFileLoader" />
    
    <event name="onClose"/>
    
    <handler name="oninit">
    	canvas.currentFileExplorer = this;
        lz.Track.register(this._trashBar._trashIcon, canvas.currentImagesListdraw.currentTrackGroupName);
    </handler>
    
	<handler name="onvisible">
		if ($debug) Debug.write("fileExplorer::onvisible this._selected ", this._selected);
		//This is thrown whenever an uploaded Document has completed
		if (this._selected == null || !this._selected.isFolder) {
			this.loadFiles();
		} else {
			this._selected.refresh();
		}
	</handler>
    
    <method name="selectItem" args="itemRef">
        if (this._selected != null) {
            this._selected.deselectItem();
        }
        
        this._selected = itemRef;
        this._selected.selectItem();
        
        //Set parent folder id for next Folder or uploaded file
        if (this._selected.fileId == 0) {
            if (this._selected.isOwner) {
                this.parentFolderId = -2;
            } else {
                this.parentFolderId = 0;
            }
        } else {
            this.parentFolderId = this._selected.fileId;
        }
        
    </method>
    
    <method name="addFile">
    	<![CDATA[
	    	if ($debug) Debug.write("addFile :: ",this._selected,this.parentFolderId);
	    	
	    	if (!canvas.isAllowedToDraw && !canvas.ismoderator) {
	    		new lz.labelerrorPopup(canvas,{errorlabelid:1462});
	    		return;
	    	}
	    	
	    	var isOwner = 0;
	    	if (this.parentFolderId == -2) {
	    		isOwner = 1;
	    	} else {
	    		//Check if its a subfolder of a Owners Dir
	    		if (this._selected != null) {
	    			var checkForOwer = this._selected.checkForIsOwner();
	    			if ($debug) Debug.write("checkForOwer ::",checkForOwer);
	    			if (checkForOwer) {
	    				isOwner = 1;
	    			}
	    		}
	    	}
	    	
	    	if ($debug) Debug.write("addFile :: ",isOwner);
	    	
	        new lz.uploadWindowExplorer(canvas.main_content._content.inner,{
	                            x:60,uploadmodule:canvas.uploadmoduleimg,
	                            parentFolderId:this.parentFolderId,
	                            isOwner:isOwner,
	                            fileExplorerRef:this,
	                            isOnlyImage:true,
	                            servletName:'file.upload'
	                        });
        ]]>
    </method>
    
    <method name="addFolder">
    	<![CDATA[
    		if (!canvas.isAllowedToDraw && !canvas.ismoderator) {
	    		new lz.labelerrorPopup(canvas,{errorlabelid:1462});
	    		return;
	    	}
    
	        if (this._selected == null) {
	        	if ($debug) Debug.write("addFolder ::1 ",this._selected);
	            this._filearea._contentarea.subviews[0].addFolder();
	        } else {
	            if (this._selected.isFolder) {
	            	if ($debug) Debug.write("-1 this._selected.isFolder ",this._selected);
	                this._selected.addFolder();
	            } else {
	            	if ($debug) Debug.write("-2 !this._selected.isFolder ",this._selected);
	                this._selected.parent.parent.addFolder();
	            }
	        }
	    ]]>
    </method>
    
    <method name="loadWmlFile" args="itemObj">
		this.selectItem(itemObj);
		canvas._drawarea.prepareLoadWMLFile(itemObj); 
		//canvas._drawarea.loadObjectList(itemObj); 
	</method>

    
    <method name="loadDocument" args="itemObj">
        this.selectItem(itemObj);
        this._documentsTabs.setAttribute("height",20);
        this._documentsTabs.setAttribute("visibility","visible");
        this._documentsTabs.hideAll();
        var t = new lz.presentationPreview(this,{
                        documentObj:itemObj,
                        refObjList:this
                    });
        //t.sendToBack();
        //this._bg1.sendToBack();
        //this._bg2.sendToBack();
        this._documentsTabs.bringToFront();
        return t;
    </method>
    
    <method name="playVideo" args="itemObj">
    	this.selectItem(itemObj);
    	canvas._drawarea.playVideoSynced(itemObj.fileId,itemObj.fileName,itemObj.flvWidth,itemObj.flvHeight);
    </method>
    
	<method name="loadFiles">
	<![CDATA[
		if (!rootFileLoader) {
			rootFileLoader = new lz.restCall(this, {
				restUrl: canvas.getUrl() + 'services/file/room/' + hib.currentroomid
				, restMethod: URLRequestMethod.GET
				, errorCallback: httpRequestError
				, successCallback: httpRequestComplete
				});
		}
		var variables:URLVariables = new URLVariables();
		variables.sid = canvas.sessionId;
		rootFileLoader.load(variables);
	]]>
	</method>
	
	<method name="httpRequestComplete" args="event">
		var o = JSON.parse(event.target.data);
		if ($debug) Debug.info("httpRequestComplete ", this);
		if ($debug) Debug.info("httpRequestComplete ", o);
		createRootItems(o.fileExplorerObject);
	</method>
    
	<method name="httpRequestError" args="event">
		if ($debug) Debug.error("httpRequestError ", event);
	</method>
	
	<method name="setSize" args="size, el">
		var sizem = Math.round((size / 1024 / 1024) * 100) / 100;
		el.setAttribute("text","" + sizem + " MBytes");
	</method>
	    
	<method name="setNodes" args="list, root">
	<![CDATA[
		if (!list) {
			return;
		}
		for (var i = 0; i < list.length; ++i) {
			var f = list[i];
			//if ($debug) Debug.write("fileItem, ", f);
			switch (f.type) {
				case 'Folder':
					new lz.folderFileExplorerItem(root.content,{
							fileId: f.id
							, fileName: f.name
							, fileIcon: 'icon_folder_rsc'
							, refObjListRoot:this
							});
					break;
				case 'Image':
					new lz.imageFileExplorerItem(root.content,{
							isFolder: false
							, fileId: f.id
							, fileName: f.name
							, fileHash: f.hash
							, isImage: true
							, fileIcon: 'file_explorer_image_rsc'
							, refObjListRoot: this
							});
					break;
				case 'Presentation':
					new lz.documentFileExplorerItem(root.content,{
							isFolder: false
							, fileId: f.id
							, fileName: f.name
							, fileHash: f.hash
							, isPresentation: true
							, fileIcon: 'file_explorer_document_rsc'
							, refObjListRoot: this
							});
					break;
				case 'Video':
					new lz.videoFileExplorerItem(root.content,{
							isFolder: false
							, isVideo: true
							, fileId: f.id
							, fileName: f.name
							, fileHash: f.hash
							, isImage: true
							, fileIcon: 'file_explorer_video_rsc'
							, flvHeight: f.flvHeight
							, flvWidth: f.flvWidth
							, refObjListRoot: this
							});
					break;
				case 'WmlFile':
					new lz.wmlFileExplorerItem(root.content,{
							isFolder: false
							, fileId: f.id
							, fileName: f.name
							, fileIcon: 'file_explorer_wml_rsc'
							, isWmlFile: true
							, refObjListRoot: this
							});
					break;
				case 'PollChart':
					new lz.wmlFileExplorerItem(root.content,{
							isFolder: false
							, fileId: f.id
							, fileName: f.name
							, fileIcon: 'file_explorer_chart_rsc'
							, isChart: true
							, refObjListRoot: this
							});
					break;
			}
		}
	]]>
	</method>
	
	<method name="createRootItems" args="roomObject">
	<![CDATA[
		this.clearContent();
		if ($debug) Debug.info("createRootItems ", roomObject);
		
		setSize(roomObject.userHomeSize, this._userSpace._userHomeSize);
		setSize(roomObject.roomHomeSize, this._userSpace._roomHomeSize);
		
		var userHome = new lz.rootFileExplorerItem(this._filearea._contentarea,{
				open:true
				, fileId: -1
				, fileName:canvas.getLabelName(706)
				, name: '_userHome'
				, isRoot:true
				, fileIcon:'file_explorer_folder_home_rsc'
				, isOwner:true
				, refObjListRoot:this
				});
		userHome.content.setAttribute("visibility", "visible");
		userHome.icon_folder_pre.setAttribute("frame", 2);
		userHome._folderIcon.setAttribute("frame", 2);
		
		setNodes(roomObject.userHome, userHome);
		
		var roomHome = new lz.rootFileExplorerItem(this._filearea._contentarea,{
				open: true
				, fileId: -2
				, fileName: canvas.getLabelName(707)
				, name: '_roomHome'
				, isRoot: true
				, fileIcon: 'file_explorer_folder_network_rsc'
				, refObjListRoot: this
				});
		roomHome.content.setAttribute("visibility", "visible");
		roomHome.icon_folder_pre.setAttribute("frame", 2);
		roomHome._folderIcon.setAttribute("frame", 2);
		
		setNodes(roomObject.roomHome, roomHome);
	]]>
	</method>
	
	<method name="clearContent">
	<![CDATA[
		var area = this._filearea._contentarea;
		//if ($debug) Debug.info("clearContent:: ", area);
		while (area.subviews.length > 0) {
			area.subviews[0].destroy();
		}
	]]>
	</method>
    
    <!--
        Borders
     -->
               
    <view name="_border2" x="0" y="${ 33 + parent._documentsTabs.height }" width="$once{ parent.width }" 
          height="1" bgcolor="$once{ canvas.getThemeColor('secondBorderColor') }" />     
    
    <!--
        Documents - Tabbar
     --> 
    <documentsTabBar name="_documentsTabs" y="14" width="$once{ parent.width }"
                    visibility="hidden" />
    	
    
    <!--
        File Tree Content Tabbar
     --> 
     
    <view name="_fileBar" layout="axis:x" x="0" y="${ 14 + parent._documentsTabs.height }">
        <baseChooseIconView labelid="702" height="20" width="19" bgcolor="$once{ canvas.getThemeColor('secondBorderColor') }"
                            resourceN="file_explorer_add_file_rsc">
            <handler name="onclick">
                if ($debug) Debug.write("Upload File");
                parent.parent.addFile();
            </handler>
        </baseChooseIconView>
        <baseChooseIconView labelid="703" height="20" width="19" bgcolor="$once{ canvas.getThemeColor('secondBorderColor') }"
                            resourceN="file_explorer_add_folder_rsc" >
            <handler name="onclick">
                if ($debug) Debug.write("Add Folder");
                parent.parent.addFolder();
            </handler>
        </baseChooseIconView>
        <baseChooseIconView labelid="704" height="20" width="19" bgcolor="$once{ canvas.getThemeColor('secondBorderColor') }"
                            resourceN="file_explorer_reload_rsc" >
            <handler name="onclick">
                if ($debug) Debug.write("Refresh Folder");
                parent.parent.loadFiles();
            </handler>
        </baseChooseIconView>
        <view bgcolor="$once{ canvas.getThemeColor('secondBorderColor') }" height="20" width="1" />
    </view>
    
    <!--
        File Tree Content Trashbar
     --> 
     
    <view name="_trashBar" layout="axis:x" x="$once{ parent.width - 20 }" 
          y="${ 14 + parent._documentsTabs.height }">
        <baseChooseIconView name="_trashIcon" labelid="705" height="20" width="19" 
                         resourceN="file_explorer_trash_rsc" bgcolor="$once{ canvas.getThemeColor('secondBorderColor') }">
            <attribute name="isTrashCan" value="true" type="boolean" />
            <handler name="onclick">
                if ($debug) Debug.write("Delete Folder and Files");
            </handler>
            <handler name="onmousetrackover">
                //if ($debug) Debug.write("onmousetrackover");
                canvas.currentImagesListdraw.currentDragItem.sendOverItem(this);
                this.onmouseover.sendEvent();
            </handler>
            <handler name="onmousetrackout">
                //if ($debug) Debug.write("onmousetrackout");
                canvas.currentImagesListdraw.currentDragItem.sendOutItem(this);
                this.onmouseout.sendEvent();
            </handler>
            <handler name="onmousetrackup">
                if ($debug) Debug.write("onmousetrackup");
                this.onmouseout.sendEvent();
            </handler> 
        </baseChooseIconView>
        <view bgcolor="0xE0E0E0" height="20" width="1" />
    </view>
    
    <!--
        File Tree Content
     --> 
    
    <view name="_filearea" x="1" y="${ 34 + parent._documentsTabs.height }" clip="true"
          height="${ parent.height - 35 - parent._documentsTabs.height - parent._userSpace.height }" 
          width="$once{ parent.width }">
        
        <attribute name="currentTrackGroupName" value="fileExplorer" type="string" />
        
        <attribute name="currentDragItem" value="null" />
        
        <handler name="oninit">
            canvas.currentImagesListdraw = this;
        </handler>
        
        <view name="_contentarea" layout="axis:y;inset:1" />
        
        <om_vscrollbar name="_scrollbar" />
        <om_hscrollbar name="_hscrollbar" />
    </view>
    
    <view name="_userSpace" height="40" valign="bottom" width="$once{ parent.width }">
    	
    	<labelText name="_userHomeSizeLabel" labelid="923" fgcolor="$once{ canvas.getThemeColor('menuTextColor') }" />
    	
    	<labelText name="_userHomeSize" align="right" fgcolor="$once{ canvas.getThemeColor('menuTextColor') }" />
    	
    	<labelText name="_roomHomeSizeLabel" labelid="924" y="20" fgcolor="$once{ canvas.getThemeColor('menuTextColor') }" />
    	
    	<labelText name="_roomHomeSize" align="right" y="20" fgcolor="$once{ canvas.getThemeColor('menuTextColor') }" />
    	
    </view>
    
</class>

</library>
